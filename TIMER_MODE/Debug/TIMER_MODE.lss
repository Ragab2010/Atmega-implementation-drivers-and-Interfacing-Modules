
TIMER_MODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003f0  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000069a  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <timer0_init>:
 */

#include "avr/io.h"


void timer0_init(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRB |=(1<<PB3);
  74:	a7 e3       	ldi	r26, 0x37	; 55
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e3       	ldi	r30, 0x37	; 55
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	88 60       	ori	r24, 0x08	; 8
  80:	8c 93       	st	X, r24
	TCCR0 =(1<<FOC0)|(1<<COM00)|(1<<CS01)|(1<<WGM01);
  82:	e3 e5       	ldi	r30, 0x53	; 83
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	8a e9       	ldi	r24, 0x9A	; 154
  88:	80 83       	st	Z, r24


}
  8a:	cf 91       	pop	r28
  8c:	df 91       	pop	r29
  8e:	08 95       	ret

00000090 <main>:


int main(){
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	0f 92       	push	r0
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	DDRB |=(1<<PB2);
  9a:	a7 e3       	ldi	r26, 0x37	; 55
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e7 e3       	ldi	r30, 0x37	; 55
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	8c 93       	st	X, r24
	timer0_init();
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <timer0_init>
	char i=0;
  ac:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		if(TIFR & (1<<TOV0)){
  ae:	e8 e5       	ldi	r30, 0x58	; 88
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 2f       	mov	r24, r24
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	81 70       	andi	r24, 0x01	; 1
  ba:	90 70       	andi	r25, 0x00	; 0
  bc:	88 23       	and	r24, r24
  be:	79 f0       	breq	.+30     	; 0xde <main+0x4e>
			PORTB ^=(1<<PB2);
  c0:	a8 e3       	ldi	r26, 0x38	; 56
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	e8 e3       	ldi	r30, 0x38	; 56
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	90 81       	ld	r25, Z
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	89 27       	eor	r24, r25
  ce:	8c 93       	st	X, r24
			TIFR |=(1<<TOV0);
  d0:	a8 e5       	ldi	r26, 0x58	; 88
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	e8 e5       	ldi	r30, 0x58	; 88
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	8c 93       	st	X, r24

		}
		if((TIFR & (1<<OCF0)) && i == 0){
  de:	e8 e5       	ldi	r30, 0x58	; 88
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 2f       	mov	r24, r24
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	82 70       	andi	r24, 0x02	; 2
  ea:	90 70       	andi	r25, 0x00	; 0
  ec:	00 97       	sbiw	r24, 0x00	; 0
  ee:	81 f0       	breq	.+32     	; 0x110 <main+0x80>
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	88 23       	and	r24, r24
  f4:	69 f4       	brne	.+26     	; 0x110 <main+0x80>
			TIFR |=(1<<OCF0);
  f6:	a8 e5       	ldi	r26, 0x58	; 88
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	e8 e5       	ldi	r30, 0x58	; 88
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	8c 93       	st	X, r24
			OCR0 = 100;
 104:	ec e5       	ldi	r30, 0x5C	; 92
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	84 e6       	ldi	r24, 0x64	; 100
 10a:	80 83       	st	Z, r24
			i=0;
 10c:	19 82       	std	Y+1, r1	; 0x01
 10e:	cf cf       	rjmp	.-98     	; 0xae <main+0x1e>
		}
		else if((TIFR & (1<<OCF0)) && i == 1){
 110:	e8 e5       	ldi	r30, 0x58	; 88
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 2f       	mov	r24, r24
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	82 70       	andi	r24, 0x02	; 2
 11c:	90 70       	andi	r25, 0x00	; 0
 11e:	00 97       	sbiw	r24, 0x00	; 0
 120:	31 f2       	breq	.-116    	; 0xae <main+0x1e>
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	19 f6       	brne	.-122    	; 0xae <main+0x1e>
					TIFR |=(1<<OCF0);
 128:	a8 e5       	ldi	r26, 0x58	; 88
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	e8 e5       	ldi	r30, 0x58	; 88
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	82 60       	ori	r24, 0x02	; 2
 134:	8c 93       	st	X, r24
					OCR0 = 250;
 136:	ec e5       	ldi	r30, 0x5C	; 92
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	8a ef       	ldi	r24, 0xFA	; 250
 13c:	80 83       	st	Z, r24
					i=0;
 13e:	19 82       	std	Y+1, r1	; 0x01
 140:	b6 cf       	rjmp	.-148    	; 0xae <main+0x1e>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
