
TEST_SIZE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000160  2**0
                  ALLOC
  2 .stab         00000390  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006b0  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

#include "avr/io.h"

unsigned int nn;

int main() {
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	29 97       	sbiw	r28, 0x09	; 9
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61

	DDRB = 0XFF;
  90:	e7 e3       	ldi	r30, 0x37	; 55
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	80 83       	st	Z, r24
	unsigned int n;
	unsigned int a=256;
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	9f 83       	std	Y+7, r25	; 0x07
  9e:	8e 83       	std	Y+6, r24	; 0x06
	unsigned int b=257;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	9d 83       	std	Y+5, r25	; 0x05
  a6:	8c 83       	std	Y+4, r24	; 0x04
	unsigned int c=a + b;
  a8:	2e 81       	ldd	r18, Y+6	; 0x06
  aa:	3f 81       	ldd	r19, Y+7	; 0x07
  ac:	8c 81       	ldd	r24, Y+4	; 0x04
  ae:	9d 81       	ldd	r25, Y+5	; 0x05
  b0:	82 0f       	add	r24, r18
  b2:	93 1f       	adc	r25, r19
  b4:	9b 83       	std	Y+3, r25	; 0x03
  b6:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char ss=nn*255;
  b8:	40 91 60 00 	lds	r20, 0x0060
  bc:	50 91 61 00 	lds	r21, 0x0061
  c0:	ca 01       	movw	r24, r20
  c2:	9c 01       	movw	r18, r24
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	c9 01       	movw	r24, r18
  ca:	96 95       	lsr	r25
  cc:	98 2f       	mov	r25, r24
  ce:	88 27       	eor	r24, r24
  d0:	97 95       	ror	r25
  d2:	87 95       	ror	r24
  d4:	82 1b       	sub	r24, r18
  d6:	93 0b       	sbc	r25, r19
  d8:	84 0f       	add	r24, r20
  da:	95 1f       	adc	r25, r21
  dc:	89 83       	std	Y+1, r24	; 0x01
	PORTB = c;
  de:	e8 e3       	ldi	r30, 0x38	; 56
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	80 83       	st	Z, r24
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x6a>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
