
VALUE_PWM_PROBLEM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  00000272  2**0
                  ALLOC
  2 .stab         000004c8  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000719  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 84 00 	call	0x108	; 0x108 <main>
  74:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:

volatile char ON_FRIST_RA1=0;
volatile char ON_FRIST_RA2=0;


ISR(TIMER0_OVF_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	af 93       	push	r26
  8a:	bf 93       	push	r27
  8c:	ef 93       	push	r30
  8e:	ff 93       	push	r31
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62

	TIFR |=(1<<TOV0);//clear overflow flage
  98:	a8 e5       	ldi	r26, 0x58	; 88
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	e8 e5       	ldi	r30, 0x58	; 88
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	8c 93       	st	X, r24

	++N_OVERFLOW_PA0;
  a6:	80 91 60 00 	lds	r24, 0x0060
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 60 00 	sts	0x0060, r24
	++N_OVERFLOW_PA1;
  b0:	80 91 61 00 	lds	r24, 0x0061
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	80 93 61 00 	sts	0x0061, r24
	++N_OVERFLOW_PA2;
  ba:	80 91 62 00 	lds	r24, 0x0062
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 62 00 	sts	0x0062, r24





}
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	ff 91       	pop	r31
  ca:	ef 91       	pop	r30
  cc:	bf 91       	pop	r27
  ce:	af 91       	pop	r26
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <timer0_init_interrupt>:
void timer0_init_interrupt(){
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |=(1<<FOC0) |(1<<CS01) ;
  e4:	a3 e5       	ldi	r26, 0x53	; 83
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e3 e5       	ldi	r30, 0x53	; 83
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 68       	ori	r24, 0x82	; 130
  f0:	8c 93       	st	X, r24
	TIMSK |=(1<<TOIE0);
  f2:	a9 e5       	ldi	r26, 0x59	; 89
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e9 e5       	ldi	r30, 0x59	; 89
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	8c 93       	st	X, r24
	sei();
 100:	78 94       	sei

}
 102:	cf 91       	pop	r28
 104:	df 91       	pop	r29
 106:	08 95       	ret

00000108 <main>:


int main(){
 108:	df 93       	push	r29
 10a:	cf 93       	push	r28
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62

	DDRA |=(1<<PA0)|(1<<PA1)|(1<<PA2);//MAKE PA0 PA1 PA2 AS output
 110:	aa e3       	ldi	r26, 0x3A	; 58
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	ea e3       	ldi	r30, 0x3A	; 58
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	87 60       	ori	r24, 0x07	; 7
 11c:	8c 93       	st	X, r24
	PORTA |=(1<<PA0)|(1<<PA1)|(1<<PA2);//MAKE VOLT ON  PA0 PA1 PA2 ZERO VOLT
 11e:	ab e3       	ldi	r26, 0x3B	; 59
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	eb e3       	ldi	r30, 0x3B	; 59
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	87 60       	ori	r24, 0x07	; 7
 12a:	8c 93       	st	X, r24

	timer0_init_interrupt();
 12c:	0e 94 6e 00 	call	0xdc	; 0xdc <timer0_init_interrupt>

	while(1){

		if(N_OVERFLOW_PA0 == PA0_ON ){ //ON -OFF ARE EQUAL 50 OVERFLOW
 130:	80 91 60 00 	lds	r24, 0x0060
 134:	82 33       	cpi	r24, 0x32	; 50
 136:	51 f4       	brne	.+20     	; 0x14c <main+0x44>
			N_OVERFLOW_PA0=0;
 138:	10 92 60 00 	sts	0x0060, r1
			PORTA ^=(1<<PA0);
 13c:	ab e3       	ldi	r26, 0x3B	; 59
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	eb e3       	ldi	r30, 0x3B	; 59
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	90 81       	ld	r25, Z
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	89 27       	eor	r24, r25
 14a:	8c 93       	st	X, r24
		 1-make Flage
		 2-sum the time of ONN with OFF
		 ----------
		 use method 1
		 */
		if((N_OVERFLOW_PA1 == PA1_ON) && ON_FRIST_RA1 ==0 ){
 14c:	80 91 61 00 	lds	r24, 0x0061
 150:	87 30       	cpi	r24, 0x07	; 7
 152:	91 f4       	brne	.+36     	; 0x178 <main+0x70>
 154:	80 91 63 00 	lds	r24, 0x0063
 158:	88 23       	and	r24, r24
 15a:	71 f4       	brne	.+28     	; 0x178 <main+0x70>
			N_OVERFLOW_PA1=0;
 15c:	10 92 61 00 	sts	0x0061, r1
			ON_FRIST_RA1 =1;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 63 00 	sts	0x0063, r24
			PORTA ^=(1<<PA1);
 166:	ab e3       	ldi	r26, 0x3B	; 59
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	eb e3       	ldi	r30, 0x3B	; 59
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	90 81       	ld	r25, Z
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	89 27       	eor	r24, r25
 174:	8c 93       	st	X, r24
 176:	14 c0       	rjmp	.+40     	; 0x1a0 <main+0x98>
		}else if((N_OVERFLOW_PA1 == PA1_OFF) && ON_FRIST_RA1 ==1){
 178:	80 91 61 00 	lds	r24, 0x0061
 17c:	83 30       	cpi	r24, 0x03	; 3
 17e:	81 f4       	brne	.+32     	; 0x1a0 <main+0x98>
 180:	80 91 63 00 	lds	r24, 0x0063
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	61 f4       	brne	.+24     	; 0x1a0 <main+0x98>
			N_OVERFLOW_PA1=0;
 188:	10 92 61 00 	sts	0x0061, r1
			ON_FRIST_RA1 =0;
 18c:	10 92 63 00 	sts	0x0063, r1
			PORTA ^=(1<<PA1);
 190:	ab e3       	ldi	r26, 0x3B	; 59
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	eb e3       	ldi	r30, 0x3B	; 59
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	90 81       	ld	r25, Z
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	89 27       	eor	r24, r25
 19e:	8c 93       	st	X, r24
		 same problem
		 --------
		 but here will use method 1
		 */

		if((N_OVERFLOW_PA2 == PA2_ON) && ON_FRIST_RA2  == 0){
 1a0:	80 91 62 00 	lds	r24, 0x0062
 1a4:	84 30       	cpi	r24, 0x04	; 4
 1a6:	91 f4       	brne	.+36     	; 0x1cc <main+0xc4>
 1a8:	80 91 64 00 	lds	r24, 0x0064
 1ac:	88 23       	and	r24, r24
 1ae:	71 f4       	brne	.+28     	; 0x1cc <main+0xc4>
			N_OVERFLOW_PA2=0;
 1b0:	10 92 62 00 	sts	0x0062, r1
			ON_FRIST_RA2 = 1;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 64 00 	sts	0x0064, r24
			PORTA ^=(1<<PA2);
 1ba:	ab e3       	ldi	r26, 0x3B	; 59
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	eb e3       	ldi	r30, 0x3B	; 59
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	90 81       	ld	r25, Z
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	89 27       	eor	r24, r25
 1c8:	8c 93       	st	X, r24
 1ca:	b2 cf       	rjmp	.-156    	; 0x130 <main+0x28>
		}else if((N_OVERFLOW_PA2 == PA2_OFF) && ON_FRIST_RA2 == 1){
 1cc:	80 91 62 00 	lds	r24, 0x0062
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <main+0xce>
 1d4:	ad cf       	rjmp	.-166    	; 0x130 <main+0x28>
 1d6:	80 91 64 00 	lds	r24, 0x0064
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <main+0xd8>
 1de:	a8 cf       	rjmp	.-176    	; 0x130 <main+0x28>
			N_OVERFLOW_PA2=0;
 1e0:	10 92 62 00 	sts	0x0062, r1
			ON_FRIST_RA2 = 0;
 1e4:	10 92 64 00 	sts	0x0064, r1
			PORTA ^=(1<<PA2);
 1e8:	ab e3       	ldi	r26, 0x3B	; 59
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	eb e3       	ldi	r30, 0x3B	; 59
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	90 81       	ld	r25, Z
 1f2:	84 e0       	ldi	r24, 0x04	; 4
 1f4:	89 27       	eor	r24, r25
 1f6:	8c 93       	st	X, r24
 1f8:	9b cf       	rjmp	.-202    	; 0x130 <main+0x28>

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
