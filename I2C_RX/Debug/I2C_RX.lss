
I2C_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000504  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000726  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_init>:
 */

#include "avr/io.h"

/*slave mode*/
void I2C_init(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	//Frequncy eqaul 125KHz
	TWBR = 0X47;
  74:	e0 e2       	ldi	r30, 0x20	; 32
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	87 e4       	ldi	r24, 0x47	; 71
  7a:	80 83       	st	Z, r24
	TWSR = 0X00;
  7c:	e1 e2       	ldi	r30, 0x21	; 33
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	10 82       	st	Z, r1
	//TWPS1 TWPS0 = 00   -- no Prescaler

	TWCR = (1<<TWEN);  //Enable the TWI module
  82:	e6 e5       	ldi	r30, 0x56	; 86
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	84 e0       	ldi	r24, 0x04	; 4
  88:	80 83       	st	Z, r24

}
  8a:	cf 91       	pop	r28
  8c:	df 91       	pop	r29
  8e:	08 95       	ret

00000090 <I2C_initSlave>:
void I2C_initSlave(unsigned char slaveAddr){
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	0f 92       	push	r0
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1<<TWEN);  //Enable the TWI module FRIST IN SLAVE MODE
  9c:	e6 e5       	ldi	r30, 0x56	; 86
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	80 83       	st	Z, r24
	TWAR = slaveAddr;
  a4:	e2 e2       	ldi	r30, 0x22	; 34
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	80 83       	st	Z, r24
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);//ENABLE , CLAER FLAG , SEND ACK
  ac:	e6 e5       	ldi	r30, 0x56	; 86
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	84 ec       	ldi	r24, 0xC4	; 196
  b2:	80 83       	st	Z, r24
	//WE CAN REMOVE ACK

}
  b4:	0f 90       	pop	r0
  b6:	cf 91       	pop	r28
  b8:	df 91       	pop	r29
  ba:	08 95       	ret

000000bc <I2C_listen>:
void I2C_listen(){
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62

	while(!(TWCR & (1<<TWINT))); //IS LISIN TO CALL FROM MASTER TO ACK
  c4:	e6 e5       	ldi	r30, 0x56	; 86
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 23       	and	r24, r24
  cc:	dc f7       	brge	.-10     	; 0xc4 <I2C_listen+0x8>
}
  ce:	cf 91       	pop	r28
  d0:	df 91       	pop	r29
  d2:	08 95       	ret

000000d4 <I2C_start>:


void I2C_start(){
  d4:	df 93       	push	r29
  d6:	cf 93       	push	r28
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN) | (1<<TWINT)| (1<<TWSTA);
  dc:	e6 e5       	ldi	r30, 0x56	; 86
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	84 ea       	ldi	r24, 0xA4	; 164
  e2:	80 83       	st	Z, r24
	//Enable the TWI module
	// make flag be zero
	//Transmit START bit on SDA bus

	while(!(TWCR & (1<<TWINT))); //(start bit is send successfully)
  e4:	e6 e5       	ldi	r30, 0x56	; 86
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	88 23       	and	r24, r24
  ec:	dc f7       	brge	.-10     	; 0xe4 <I2C_start+0x10>
}
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	08 95       	ret

000000f4 <I2C_stop>:
void I2C_stop(){
  f4:	df 93       	push	r29
  f6:	cf 93       	push	r28
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWSTO);
  fc:	e6 e5       	ldi	r30, 0x56	; 86
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	84 e9       	ldi	r24, 0x94	; 148
 102:	80 83       	st	Z, r24
	//Enable the TWI module
	// make flag be zero
	//Transmit START bit on SDA bus


}
 104:	cf 91       	pop	r28
 106:	df 91       	pop	r29
 108:	08 95       	ret

0000010a <I2C_write>:

void I2C_write(unsigned char byte){
 10a:	df 93       	push	r29
 10c:	cf 93       	push	r28
 10e:	0f 92       	push	r0
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	89 83       	std	Y+1, r24	; 0x01
	TWDR = byte; // assign byte to DATA REGISTER
 116:	e3 e2       	ldi	r30, 0x23	; 35
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	80 83       	st	Z, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
 11e:	e6 e5       	ldi	r30, 0x56	; 86
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	84 e8       	ldi	r24, 0x84	; 132
 124:	80 83       	st	Z, r24
	// make flag be zero
	//Enable the TWI module

	while(!(TWCR & (1<<TWINT)));//(data is send successfully)
 126:	e6 e5       	ldi	r30, 0x56	; 86
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	88 23       	and	r24, r24
 12e:	dc f7       	brge	.-10     	; 0x126 <I2C_write+0x1c>
}
 130:	0f 90       	pop	r0
 132:	cf 91       	pop	r28
 134:	df 91       	pop	r29
 136:	08 95       	ret

00000138 <I2C_read>:

unsigned char I2C_read(unsigned char isLast){
 138:	df 93       	push	r29
 13a:	cf 93       	push	r28
 13c:	0f 92       	push	r0
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	89 83       	std	Y+1, r24	; 0x01

	if(isLast == 0){//for more one byte
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	88 23       	and	r24, r24
 148:	29 f4       	brne	.+10     	; 0x154 <I2C_read+0x1c>
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 14a:	e6 e5       	ldi	r30, 0x56	; 86
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	84 ec       	ldi	r24, 0xC4	; 196
 150:	80 83       	st	Z, r24
 152:	04 c0       	rjmp	.+8      	; 0x15c <I2C_read+0x24>
		// make flag be zero
		//Enable the TWI module
		//Transmit ACK bit on SDA bus

	}else{//for one byte
		TWCR = (1<<TWINT)|(1<<TWEN);
 154:	e6 e5       	ldi	r30, 0x56	; 86
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	84 e8       	ldi	r24, 0x84	; 132
 15a:	80 83       	st	Z, r24
		// make flag be zero
		//Enable the TWI module
	}


	while(!(TWCR & (1<<TWINT))); //(data received successfully)
 15c:	e6 e5       	ldi	r30, 0x56	; 86
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	88 23       	and	r24, r24
 164:	dc f7       	brge	.-10     	; 0x15c <I2C_read+0x24>

	return TWDR ; // return byte from the DATA REGISTER
 166:	e3 e2       	ldi	r30, 0x23	; 35
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
}
 16c:	0f 90       	pop	r0
 16e:	cf 91       	pop	r28
 170:	df 91       	pop	r29
 172:	08 95       	ret

00000174 <main>:
//	return 0;
//}
//


int main(){
 174:	df 93       	push	r29
 176:	cf 93       	push	r28
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
/*this slave send 0x0f to master*/
	I2C_initSlave(0b11000000);
 17c:	80 ec       	ldi	r24, 0xC0	; 192
 17e:	0e 94 48 00 	call	0x90	; 0x90 <I2C_initSlave>
	I2C_listen();
 182:	0e 94 5e 00 	call	0xbc	; 0xbc <I2C_listen>
	I2C_write(0x0F);
 186:	8f e0       	ldi	r24, 0x0F	; 15
 188:	0e 94 85 00 	call	0x10a	; 0x10a <I2C_write>
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x18>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
