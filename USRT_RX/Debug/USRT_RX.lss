
USRT_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000444  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006ce  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 83 00 	call	0x106	; 0x106 <main>
  64:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_init>:
#include <util/delay.h>
/*
 * syn mode - 1MHZ -boudrate=9600bps
 */

void UART_init(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62

	//UCSRA |=(1<<U2X); //we use syn mode
	UCSRB |=(1<<RXEN);
  74:	aa e2       	ldi	r26, 0x2A	; 42
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ea e2       	ldi	r30, 0x2A	; 42
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 61       	ori	r24, 0x10	; 16
  80:	8c 93       	st	X, r24
	UCSRC |=(1<<UMSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  82:	a0 e4       	ldi	r26, 0x40	; 64
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e0 e4       	ldi	r30, 0x40	; 64
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	86 64       	ori	r24, 0x46	; 70
  8e:	8c 93       	st	X, r24
	UBRRH |=(1<<URSEL);
  90:	a0 e4       	ldi	r26, 0x40	; 64
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e0 e4       	ldi	r30, 0x40	; 64
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	8c 93       	st	X, r24
	UBRRL =52;
  9e:	e9 e2       	ldi	r30, 0x29	; 41
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	84 e3       	ldi	r24, 0x34	; 52
  a4:	80 83       	st	Z, r24
	DDRB &=~(1<<PB0);
  a6:	a7 e3       	ldi	r26, 0x37	; 55
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e7 e3       	ldi	r30, 0x37	; 55
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8e 7f       	andi	r24, 0xFE	; 254
  b2:	8c 93       	st	X, r24
}
  b4:	cf 91       	pop	r28
  b6:	df 91       	pop	r29
  b8:	08 95       	ret

000000ba <UART_sendByte>:

void UART_sendByte(char byte){
  ba:	df 93       	push	r29
  bc:	cf 93       	push	r28
  be:	0f 92       	push	r0
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA &(1<<UDRE)));
  c6:	eb e2       	ldi	r30, 0x2B	; 43
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	88 2f       	mov	r24, r24
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	80 72       	andi	r24, 0x20	; 32
  d2:	90 70       	andi	r25, 0x00	; 0
  d4:	00 97       	sbiw	r24, 0x00	; 0
  d6:	b9 f3       	breq	.-18     	; 0xc6 <UART_sendByte+0xc>
	UDR = byte;
  d8:	ec e2       	ldi	r30, 0x2C	; 44
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	80 83       	st	Z, r24
}
  e0:	0f 90       	pop	r0
  e2:	cf 91       	pop	r28
  e4:	df 91       	pop	r29
  e6:	08 95       	ret

000000e8 <UART_reciveByte>:

char UART_reciveByte(){
  e8:	df 93       	push	r29
  ea:	cf 93       	push	r28
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSRA &(1<<RXC)));
  f0:	eb e2       	ldi	r30, 0x2B	; 43
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	dc f7       	brge	.-10     	; 0xf0 <UART_reciveByte+0x8>
	return UDR;
  fa:	ec e2       	ldi	r30, 0x2C	; 44
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z

}
 100:	cf 91       	pop	r28
 102:	df 91       	pop	r29
 104:	08 95       	ret

00000106 <main>:

int main(){
 106:	df 93       	push	r29
 108:	cf 93       	push	r28
 10a:	0f 92       	push	r0
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	UART_init();
 110:	0e 94 36 00 	call	0x6c	; 0x6c <UART_init>
	DDRA =0xff;
 114:	ea e3       	ldi	r30, 0x3A	; 58
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	80 83       	st	Z, r24
	PORTA =0x00;
 11c:	eb e3       	ldi	r30, 0x3B	; 59
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	10 82       	st	Z, r1


	char buff=0x00;
 122:	19 82       	std	Y+1, r1	; 0x01
	buff =UART_reciveByte();
 124:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_reciveByte>
 128:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		if(buff == 'A')
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	81 34       	cpi	r24, 0x41	; 65
 12e:	e9 f7       	brne	.-6      	; 0x12a <main+0x24>
			PORTA =2;
 130:	eb e3       	ldi	r30, 0x3B	; 59
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	80 83       	st	Z, r24
 138:	f8 cf       	rjmp	.-16     	; 0x12a <main+0x24>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
