
TIMER1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000354  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000069b  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TIMER1_init_overFlow>:
 *      Author: RAGAB
 */

#include "avr/io.h"

void TIMER1_init_overFlow(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRD |=(1<<PD4) |(1<<PD5);
  74:	a1 e3       	ldi	r26, 0x31	; 49
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e1 e3       	ldi	r30, 0x31	; 49
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 63       	ori	r24, 0x30	; 48
  80:	8c 93       	st	X, r24
	OCR1A =100;
  82:	ea e4       	ldi	r30, 0x4A	; 74
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	84 e6       	ldi	r24, 0x64	; 100
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	91 83       	std	Z+1, r25	; 0x01
  8c:	80 83       	st	Z, r24
	OCR1B =100;
  8e:	e8 e4       	ldi	r30, 0x48	; 72
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	84 e6       	ldi	r24, 0x64	; 100
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	91 83       	std	Z+1, r25	; 0x01
  98:	80 83       	st	Z, r24
	TCCR1A |=(1<<COM1A0)|(1<<COM1B0);
  9a:	af e4       	ldi	r26, 0x4F	; 79
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ef e4       	ldi	r30, 0x4F	; 79
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 65       	ori	r24, 0x50	; 80
  a6:	8c 93       	st	X, r24
	TCCR1B |=(1<<CS10)|(1<<WGM12);
  a8:	ae e4       	ldi	r26, 0x4E	; 78
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	ee e4       	ldi	r30, 0x4E	; 78
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	89 60       	ori	r24, 0x09	; 9
  b4:	8c 93       	st	X, r24

}
  b6:	cf 91       	pop	r28
  b8:	df 91       	pop	r29
  ba:	08 95       	ret

000000bc <main>:


int main(){
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	TIMER1_init_overFlow();
  c4:	0e 94 36 00 	call	0x6c	; 0x6c <TIMER1_init_overFlow>
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0xc>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
