
TEST_SPI_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000184  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000004c8  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000715  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  64:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_initMaster>:
#define ACK 0X05

#define START 0X0F
#define STOP  'T'

void SPI_initMaster(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRB |=(1<<PB4)|(1<<PB5)|(1<<PB7);
  74:	a7 e3       	ldi	r26, 0x37	; 55
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e3       	ldi	r30, 0x37	; 55
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 6b       	ori	r24, 0xB0	; 176
  80:	8c 93       	st	X, r24
	DDRB &=~(1<<PB6);
  82:	a7 e3       	ldi	r26, 0x37	; 55
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e3       	ldi	r30, 0x37	; 55
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 7b       	andi	r24, 0xBF	; 191
  8e:	8c 93       	st	X, r24
	SPCR =(1<<SPE)|(1<<MSTR)| (1<<SPR1) |(1<<SPR0);
  90:	ed e2       	ldi	r30, 0x2D	; 45
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	83 e5       	ldi	r24, 0x53	; 83
  96:	80 83       	st	Z, r24
}
  98:	cf 91       	pop	r28
  9a:	df 91       	pop	r29
  9c:	08 95       	ret

0000009e <SPI_initSlave>:

void SPI_initSlave(){
  9e:	df 93       	push	r29
  a0:	cf 93       	push	r28
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
	DDRB &=~((1<<PB4)|(1<<PB5)|(1<<PB7));
  a6:	a7 e3       	ldi	r26, 0x37	; 55
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e7 e3       	ldi	r30, 0x37	; 55
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8f 74       	andi	r24, 0x4F	; 79
  b2:	8c 93       	st	X, r24
	DDRB |=(1<<PB6);
  b4:	a7 e3       	ldi	r26, 0x37	; 55
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e7 e3       	ldi	r30, 0x37	; 55
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	8c 93       	st	X, r24
	SPCR =(1<<SPE);
  c2:	ed e2       	ldi	r30, 0x2D	; 45
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
}
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	08 95       	ret

000000d0 <spi_tranceiver>:

unsigned char  spi_tranceiver (unsigned char data)
{
  d0:	df 93       	push	r29
  d2:	cf 93       	push	r28
  d4:	00 d0       	rcall	.+0      	; 0xd6 <spi_tranceiver+0x6>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	89 83       	std	Y+1, r24	; 0x01

	SPDR=data;
  dc:	ef e2       	ldi	r30, 0x2F	; 47
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	80 83       	st	Z, r24
	while(!(SPSR)&(1<<SPIF));
  e4:	ee e2       	ldi	r30, 0x2E	; 46
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
	while(!(PINB & (1<<PB4)));
  ea:	e6 e3       	ldi	r30, 0x36	; 54
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 2f       	mov	r24, r24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	80 71       	andi	r24, 0x10	; 16
  f6:	90 70       	andi	r25, 0x00	; 0
  f8:	00 97       	sbiw	r24, 0x00	; 0
  fa:	b9 f3       	breq	.-18     	; 0xea <spi_tranceiver+0x1a>
	return SPDR;
  fc:	ef e2       	ldi	r30, 0x2F	; 47
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
}
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	cf 91       	pop	r28
 108:	df 91       	pop	r29
 10a:	08 95       	ret

0000010c <SPI_sendByte>:
void SPI_sendByte(unsigned char byte){
 10c:	df 93       	push	r29
 10e:	cf 93       	push	r28
 110:	0f 92       	push	r0
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	89 83       	std	Y+1, r24	; 0x01
	SPDR = byte;
 118:	ef e2       	ldi	r30, 0x2F	; 47
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	80 83       	st	Z, r24
	while(!(SPSR & (1<<SPIF)));
 120:	ee e2       	ldi	r30, 0x2E	; 46
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 23       	and	r24, r24
 128:	dc f7       	brge	.-10     	; 0x120 <SPI_sendByte+0x14>
}
 12a:	0f 90       	pop	r0
 12c:	cf 91       	pop	r28
 12e:	df 91       	pop	r29
 130:	08 95       	ret

00000132 <SPI_recieveByte>:
unsigned char SPI_recieveByte(){
 132:	df 93       	push	r29
 134:	cf 93       	push	r28
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
	while(!(SPSR & (1<<SPIF)));
 13a:	ee e2       	ldi	r30, 0x2E	; 46
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	dc f7       	brge	.-10     	; 0x13a <SPI_recieveByte+0x8>
	return SPDR;
 144:	ef e2       	ldi	r30, 0x2F	; 47
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z

}
 14a:	cf 91       	pop	r28
 14c:	df 91       	pop	r29
 14e:	08 95       	ret

00000150 <main>:


int main(){
 150:	df 93       	push	r29
 152:	cf 93       	push	r28
 154:	0f 92       	push	r0
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
	SPI_initSlave();
 15a:	0e 94 4f 00 	call	0x9e	; 0x9e <SPI_initSlave>
	 DDRC =0xff;
 15e:	e4 e3       	ldi	r30, 0x34	; 52
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	80 83       	st	Z, r24
	 PORTC =0X00;
 166:	e5 e3       	ldi	r30, 0x35	; 53
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	10 82       	st	Z, r1
	unsigned char data=0x00;
 16c:	19 82       	std	Y+1, r1	; 0x01

	while(1){


		data =spi_tranceiver(ACK);
 16e:	85 e0       	ldi	r24, 0x05	; 5
 170:	0e 94 68 00 	call	0xd0	; 0xd0 <spi_tranceiver>
 174:	89 83       	std	Y+1, r24	; 0x01
		PORTC = data;
 176:	e5 e3       	ldi	r30, 0x35	; 53
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	80 83       	st	Z, r24
 17e:	f7 cf       	rjmp	.-18     	; 0x16e <main+0x1e>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
