
TIMER_INPUT_CAPTURE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000408  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006c1  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <timer1_init_rising>:
 */

#include "avr/io.h"


void timer1_init_rising(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62

	TCCR1A =0X00;
  74:	ef e4       	ldi	r30, 0x4F	; 79
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	10 82       	st	Z, r1
	TCCR1B =(1<<ICES1)|(1<<CS10);
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	80 83       	st	Z, r24
}
  82:	cf 91       	pop	r28
  84:	df 91       	pop	r29
  86:	08 95       	ret

00000088 <timer1_init_falling>:
void timer1_init_falling(){
  88:	df 93       	push	r29
  8a:	cf 93       	push	r28
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62

	TCCR1A =0X00;
  90:	ef e4       	ldi	r30, 0x4F	; 79
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	TCCR1B =(1<<CS10);
  96:	ee e4       	ldi	r30, 0x4E	; 78
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 83       	st	Z, r24
}
  9e:	cf 91       	pop	r28
  a0:	df 91       	pop	r29
  a2:	08 95       	ret

000000a4 <main>:


int main(){
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	00 d0       	rcall	.+0      	; 0xaa <main+0x6>
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	DDRD |=(1<<PD6); // the ICP1 PIN FOR INPUT CAPTURE
  ae:	a1 e3       	ldi	r26, 0x31	; 49
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e1 e3       	ldi	r30, 0x31	; 49
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	8c 93       	st	X, r24
	DDRA =0XFF;
  bc:	ea e3       	ldi	r30, 0x3A	; 58
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	80 83       	st	Z, r24
	DDRB=0XFF;
  c4:	e7 e3       	ldi	r30, 0x37	; 55
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	80 83       	st	Z, r24




		//calculate the rising of pulse
		timer1_init_rising();
  cc:	0e 94 36 00 	call	0x6c	; 0x6c <timer1_init_rising>
		while(!(TIFR &(1<<ICF1)));
  d0:	e8 e5       	ldi	r30, 0x58	; 88
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	88 2f       	mov	r24, r24
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	80 72       	andi	r24, 0x20	; 32
  dc:	90 70       	andi	r25, 0x00	; 0
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	b9 f3       	breq	.-18     	; 0xd0 <main+0x2c>
		TIFR |=(1<<ICF1);
  e2:	a8 e5       	ldi	r26, 0x58	; 88
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	e8 e5       	ldi	r30, 0x58	; 88
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	8c 93       	st	X, r24
		t=ICR1;
  f0:	e6 e4       	ldi	r30, 0x46	; 70
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	91 81       	ldd	r25, Z+1	; 0x01
  f8:	9a 83       	std	Y+2, r25	; 0x02
  fa:	89 83       	std	Y+1, r24	; 0x01

		//calculate the falling of pulse
		 timer1_init_falling();
  fc:	0e 94 44 00 	call	0x88	; 0x88 <timer1_init_falling>
		while(!(TIFR &(1<<ICF1)));
 100:	e8 e5       	ldi	r30, 0x58	; 88
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 2f       	mov	r24, r24
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	80 72       	andi	r24, 0x20	; 32
 10c:	90 70       	andi	r25, 0x00	; 0
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	b9 f3       	breq	.-18     	; 0x100 <main+0x5c>
		TIFR |=(1<<ICF1);
 112:	a8 e5       	ldi	r26, 0x58	; 88
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e8 e5       	ldi	r30, 0x58	; 88
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8c 93       	st	X, r24
		PORTA=ICR1-t;
 120:	ab e3       	ldi	r26, 0x3B	; 59
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e6 e4       	ldi	r30, 0x46	; 70
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	91 81       	ldd	r25, Z+1	; 0x01
 12c:	98 2f       	mov	r25, r24
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	29 2f       	mov	r18, r25
 132:	28 1b       	sub	r18, r24
 134:	82 2f       	mov	r24, r18
 136:	8c 93       	st	X, r24
 138:	ff cf       	rjmp	.-2      	; 0x138 <main+0x94>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
